/*  BACKGROUND
*       there are N people, numbered 1 through N, who are playing a game.
*       a number - M - is chosen.
*       the people sit in order in a circle, and every M-th person is removed (in the same order) until only one person is left.
*       the last person left is the winner.
*       for example, for N=7, and M=3, if the game starts with player 1, then the people lose in the following order: 3,6,2,7,5,1
*           in which case player 4 wins
*   LAB
*       given N and M, output the starting player (x) in order for player 1 to win
*   INPUT
*       N M
*   OUTPUT
*       x
*/

/*  SAMPLE INPUT
7 3
*/

/*  SAMPLE OUTPUT
5
*/

/*
n = IO read() as int;
--n;
m = IO read() as int;

lastWinnerIsOne = false;
pos = 0;
people = [0...n];

while(people# > 1): {
    pos = (pos+m) % people#;
    people remove(pos);
};
last = people[0];
IO write(n-last);
*/

N,M = IO >> (read(), read()) as (int, int);
players = [1...N];

current_player = -1;
while players# > 1:{
    current_player = (current_player + M-1) % players#;   //-1 to account for the 1 that was just removed
    players remove(current_player);
};
delta = players[0]-1;
starter = N - delta;

IO write(starter);